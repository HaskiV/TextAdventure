import os
import time


##### СОБЫТИЯ #####
'''
    Передача строки, показывающей игроку, как он умирает.
    Результат: Выводит причину смерти игрока.
    Программа завершается без ошибок.
'''

def you_died(why):
    print("{}. Вы неплохо поработали!".format(why))
    print_game_over()
    exit(0)

### КОНЕЦ ###

### ПЕРСОНАЖИ ###
def guard():
    print_guard()

    # Действия со стражником
    actions_dict = {"осмотреться": "Вы видите, что стражник спит крепким сном, а рядом с ним дверь, которая ведет дальше. Но куда?",
                    "проверить": "Вы видите, что стражник спит крепким сном, а рядом с ним дверь, которая ведет дальше. Но куда?",
                    "красться": "Вы аккуратно крадетесь мимо стражника. Он не пробуждается даже когда вы открываете дверь. Шаг - и вас уже нет в этой комнате.",
                    "скроюсь": "Вы аккуратно крадетесь мимо стражника. Он не пробуждается даже когда вы открываете дверь. Шаг - и вас уже нет в этой комнате.",
                    "атаковать": "Вы бежите к стражнику и заносите руку, чтобы сделать его сон вечным. К сожалению, все не так просто.",
                    "атака": "Вы бежите к стражнику и заносите руку, чтобы сделать его сон вечным. К сожалению, все не так просто."}

    # Цикл открывается
    while True:
        action = input("Что будете делать? [ атаковать | осмотреться | красться ] > ").lower()
        if action in actions_dict.keys():
            print(actions_dict[action])
            if action == "красться" or action == "скроюсь":
                print("Вы ловко проскальзываете в дверь до того, как охранник проснулся.")
                print("Наконец-то свобода. Ха-ха!\n")
                return
            elif action == "атаковать" or action == "атака":
                you_died(
                    "Стражник открывает глаза, когда вы оказываетесь в шаге от него.",
                    "Он взмахивает клинком так быстро, что вы ничего не успеваете заметить и мир погружается во тьму.")

### КОНЕЦ ###

##### КОМНАТЫ ######

'''
    Игрок находит сундук с сокровищами, варианты исследования сундука с сокровищами или охраны.
    Если игрок выбирает
    - Сундук с сокровищами: показать его содержимое; возможность взять сокровище или проигнорировать его (переходит к охране)
    - Охранник: после проверки сундука с сокровищами, игнорируя сундук с сокровищами для проверки охраны, он вызывает функцию guard().
'''


def right_door_room():
    # Список Treasure_chest содержит 4 элемента.
    treasure_chest = ["Бриллианты", "Деньги", "Плащ", "Меч"]
    print("Ты проходишь в правую комнату.")
    print("В комнате вы замечаете спящего на стуле стражника с мечом в руках.")
    print("Слева от него стоит деревянный сундук.")
    print("Что же делать...")

    # Спрашиваем у игрока, что он будет делать
    action = input("Что изучишь в первую очередь? [ сундук | стражник ] > ")

    # Это способ увидеть, есть ли текст, набранный игроком, в списке
    if action.lower() in ["сокровища", "сундук", "слева"]:
        print("Сундук! Хотите его открыть? [ да | нет ]")
        choice = input("> ")

        if choice == "да" or choice == "y":
            print("Риск -- дело благородное. Посмотрим, что тут...")
            print("Со скрипом сундук открывается. Вы замираете.")
            print("Стражник ворчит что-то себе под нос и продолжает спать. Вот уж воистину крепкий сон!")
            print("Вы кое-что нашли...")

            # Для каждого сокровища (переменная создается на лету в цикле for)
            # В списке Treasure_chest выводим сокровище.
            for treasure in treasure_chest:
                print(treasure)

            # Сокровищ много, спрашиваем, что будет делать игрок
            print("Что будешь делать?")
            # Получить количество предметов в сундуке с сокровищами с помощью len()
            num_items_in_chest = len(treasure_chest)

            print(f"Забрать все {num_items_in_chest} сокровища? [ да | нет ]")

            treasure_choice = input("> ")
            if treasure_choice == "да" or treasure_choice == "y":
                treasure_chest.remove("Меч")
                print(
                    "\tВы достаете все вещи и обнаруживаете короткий блестящий меч. Он выглядит очень острым.")
                print(
                    "\tТак-то лучше'! Подобрав вещи и меч, вы готовы двигаться дальше.")

                temp_treasure_list = treasure_chest[:]
                treasure_contents = ", ".join(treasure_chest)
                print(f"\tВы получаете: {treasure_contents}.")

                # Удаление всех предметов из сундука с сокровищами
                for treasure in temp_treasure_list:

                    treasure_chest.remove(treasure)

                # Берем новый меч и оставляем старый
                treasure_chest.append("уголь")
                print(
                    f"\tЗабрав все необходимое из сундука вы оставляете {treasure_chest} следующим приключенцам.")
                print("\tВы и так уже засиделись. Пора на свободу!")
            elif treasure_choice == "нет" or treasure_choice == "n":
                print("Так. Стражник еще на месте. Отсюда видно дверь, которую он охраняет. Идти? [ да | нет ]")
        elif choice == "нет" or choice == "n":
            print("Да кому нужны эти сокровища? Идем отсюда...'")
    elif action.lower() in ["стражник", "охранник", "вправо"]:
        print("Вы решаете обратить внимание на стражника. Он ничем не выделяется, но может представлять угрозу.")
    else:
        print("Вы задумываетесь и сами не замечаете, как оказываетесь рядом со стражником. Как так?")
    guard()


def left_door_room():
    '''
    В комнате за левой дверью находится дракон.
    Если игрок решает убежать, то возвращается в предыдущую комнату.
    Иначе игрок умирает.
    '''
    print_monster()
    print("Вы выбираете левую дверь")
    print("Не требуется много времени, чтобы увидеть огромного красного дракона, лежащего на груде золота. Откуда он тут?!")
    print("Пока вы удивленно взираете на него, дракон открывает один глаз.")
    print("Вас заметили.")
    print("Вы остаетесь? [ да | нет ]")

    next_move = input("> ")

    if "нет" in next_move:
        start_adventure()
    else:
        you_died(
            "Оу, Похоже, он не ценил компанию и съел вас. Ну, по крайней мере это вкусно!")

### КОНЕЦ ###


##### ИМЯ ИГРОКА #####
def get_player_name():
    '''
    Получает имя игрока, может быть переименовано или не переименовано в зависимости от выбора игрока.
    Возвращает: имя игрока (измененное или неизмененное)
    '''
    name = input("Введите ваше имя > ")

    # ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ
    # Игрок вводит свое имя и присваивается переменной с именем "name"
    if name == '':
        alt_name = "Забавный приключенец"
        answer = input(f" {alt_name.upper()}? [ да | нет ] > ").lower()
        
        if answer.lower() in ["да", "y"]:
            name = alt_name
            print(f"Отлично, {name.upper()}! Да начнется же приключение!")
            
        elif answer.lower() in ["нет", "n"]:
            print("Тогда тебе нужно выбрать свое имя")
            get_player_name()

    elif name != False :
        print(f"Ваше имя - {name.upper()}. Да начнется же приключение!")

    # Возвращаем переменную с именем name.
    # Функция main() не знает, что такое переменная "name", так как она существует только в функции get_player_name().

    return name

### КОНЕЦ ###


def start_adventure():
    
    '''
    Эта функция начинает приключение, предоставляя два варианта на выбор игроку. Левую и правую дверь
    Выбранный вариант выведет выбранную дверь
    '''

    print_dungeon()
    print("Вы открываете глаза. В голове гудит. Проходит время, прежде чем вы приходите в себя.")
    time.sleep(2)
    print("Оглядевшись, вы понимаете, что находитесь в темнице. Но что-то не так...")
    time.sleep(2)
    print("Здесь царит легкий полумрак -- свет попадает только через маленькое окно высоко над головой")
    time.sleep(2)
    print("Похоже, на улице вечер. Тут никого нет. Чутье подсказывает, что нужно уходить отсюда. Но как?")
    time.sleep(2)
    print("Тут вы замечаете двери. Хорошо что при себе у вас остались отмычки и уголь.")
    time.sleep(2)
    print("Осталось выбрать, куда идти. Левая дверь укреплена сталью и явно тяжелая.")
    time.sleep(2)
    print("Правая дверь выглядит, как самая обыкновенная и ничем не выделяется.")

    door_picked = input("Какую дверь вы попытаетесь вскрыть? [ левую | правую ] > ")

    # Выбор двери
    if door_picked == "левую" or door_picked == "влево":
        left_door_room()
    elif door_picked == "правую" or door_picked == "вправо":
        right_door_room()
    else:
        print("Тц, нет-нет, так не пойдет! Попробуй-ка выбирать только из правой и левой двери. Удачи!")
        start_adventure()


def main():

    player_name = get_player_name()

    start_adventure()

    print("\nКонец\n")
    print(f"Спасибо за игру, {player_name.upper()}")


##### ПРИНТЫ #####
def print_dungeon():
    print()
    print("   _________________________________________________________")
    print(" /|     -_-                                             _-  |\ ")
    print("/ |_-_- _                                         -_- _-   -| \   ")
    print("  |                            _-  _--                      | ")
    print("  |                            ,                            |")
    print("  |      .-'````````'.        '(`        .-'```````'-.      |")
    print("  |    .` |           `.      `)'      .` |           `.    |          ")
    print("  |   /   |   ()        \      U      /   |    ()       \   |")
    print("  |  |    |    ;         | o   T   o |    |    ;         |  |")
    print("  |  |    |     ;        |  .  |  .  |    |    ;         |  |")
    print("  |  |    |     ;        |   . | .   |    |    ;         |  |")
    print("  |  |    |     ;        |    .|.    |    |    ;         |  |")
    print("  |  |    |____;_________|     |     |    |____;_________|  |  ")
    print("  |  |   /  __ ;   -     |     !     |   /     `'() _ -  |  |")
    print("  |  |  / __  ()        -|        -  |  /  __--      -   |  |")
    print("  |  | /        __-- _   |   _- _ -  | /        __--_    |  |")
    print("  |__|/__________________|___________|/__________________|__|")
    print(" /                                             _ -        lc \ ")
    print("/   -_- _ -             _- _---                       -_-  -_ \ ")
    print()


def print_monster():
    print()
    print("                           |                     | ")
    print("                        \     /               \     / ")
    print("                       -= .'> =-             -= <'. =- ")
    print("                          '.'.                 .'.' ")
    print("                            '.'.             .'.' ")
    print("                              '.'.----^----.'.' ")
    print("                               /'==========='\ ")
    print("                           .  /  .-.     .-.  \  . ")
    print("                           :'.\ '.O.'_ _'.O.' /.':   ")
    print("                           '. |               | .'   ")
    print("                             '|      / \      |' ")
    print("                              \  \  (o'o)  /  /")
    print("                              |\             /| ")
    print("                              \('._________.')/ ")
    print("                               '. \/|_|_|\/ .'                ")
    print("                                /'._______.'\ lc ")
    print()


def print_chest():
    print()
    print("                      _.--. ")
    print("                  _.-'_:-'|| ")
    print("              _.-'_.-::::'|| ")
    print("         _.-:'_.-::::::'  || ")
    print("       .'`-.-:::::::'     || ")
    print("      /.'`;|:::::::'      ||_ ")
    print("     ||   ||::::::'     _.;._'-._ ")
    print("     ||   ||:::::'  _.-!oo @.!-._'-. ")
    print("     ('.  ||:::::.-!()oo @!()@.-'_.| ")
    print("      '.'-;|:.-'.&$@.& ()$%-'o.'-U|| ")
    print("        `>'-.!@%()@'@_%-'_.-o _.|'|| ")
    print("         ||-._'-.@.-'_.-' _.-o  |'|| ")
    print("         ||=[ '-._.-+U/.-'    o |'|| ")
    print("         || '-.]=|| |'|      o  |'|| ")
    print("         ||      || |'|        _| '; ")
    print("         ||      || |'|    _.-'_.-' ")
    print("         |'-._   || |'|_.-'_.-' ")
    print("          '-._'-.|| |' `_.-' ")
    print("              '-.||_/.-' ")
    print()


def print_guard():
    print()
    print("                                                  ___I___ ")
    print("                                                 /=  |  #\ ")
    print("                                                /.__-| __ \ ")
    print("                                                |/ _\_/_ \| ")
    print("                                                (( __ \__)) ")
    print("                                             __ ((()))))()) __ ")
    print("                                           ,'  |()))))(((()|# `. ")
    print("                                          /    |^))()))))(^|   =\ ")
    print("                                         /    /^v^(())()()v^;'  .\ ")
    print("                                         |__.'^v^v^))))))^v^v`.__| ")
    print("                                        /_ ' \______(()_____(   | ")
    print("                                   _..-'   _//_____[xxx]_____\.-| ")
    print("                                  /,_#\.=-' /v^v^v^v^v^v^v^v^| _| ")
    print("                                  \)|)      v^v^v^v^v^v^v^v^v| _| ")
    print("                                   ||       :v^v^v^v^v^v`.-' |#  \, ")
    print("                                   ||       v^v^v^v`_/\__,--.|\_=_/ ")
    print("                                   ><       :v^v____|  \_____|_ ")
    print("                                ,  ||       v^      /  \       / ")
    print("                               //\_||_)\    `/_..-._\   )_...__\ ")
    print("                              ||   \/  #|     |_='_(     |  =_(_ ")
    print("                              ||  _/\_  |    /     =\    /  '  =\ ")
    print("                               \\\/ \/ )/ gnv |=____#|    '=....#| ")
    print()


def print_game_over():
    print()
    print("   _____          __  __ ______    ______      ________ _____  ")
    print("  / ____|   /\   |  \/  |  ____|  / __ \ \    / /  ____|  __ \ ")
    print(" | |  __   /  \  | \  / | |__    | |  | \ \  / /| |__  | |__) |")
    print(" | | |_ | / /\ \ | |\/| |  __|   | |  | |\ \/ / |  __| |  _  / ")
    print(" | |__| |/ ____ \| |  | | |____  | |__| | \  /  | |____| | \ \ ")
    print("  \_____/_/    \_\_|  |_|______|  \____/   \/   |______|_|  \_\\")
    print()

### КОНЕЦ ###


if __name__ == '__main__':
    main()
