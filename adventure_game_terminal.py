##### СОБЫТИЯ #####
'''
    Передача строки, показывающей игроку, как он умирает.
    Результат: Выводит причину смерти игрока.
    Программа завершается без ошибок.
'''

def you_died(why):
    print("{}. Вы неплохо поработали!".format(why))
    print_game_over()
    exit(0)

### СОБЫТИЯ КОНЕЦ ###

### ПЕРСОНАЖИ ###


def guard():
    print_guard()

    # Действия со стражником
    actions_dict = {"осмотреться": "Ты видишь, что охранник еще спит, вам нужно добраться до той двери справа от него. Чего ты ждешь?",
                    "красться": "Ты подходишь подходите к охраннику, он все еще спит. Дотянувшись до двери, ты медленно открываешь ее и убегаешь прочь.",
                    "атаковать": "Ты быстро бежишь к спящему стражнику, чтобы вырубить его окончательно. К сожалению, все не так просто."}

    # Цикл открывается
    while True:
        action = input("Пока стражник тебя не замечает. Что будешь делать? [ атаковать | осмотреться | красться ] > ").lower()
        if action in actions_dict.keys():
            print(actions_dict[action])
            if action == "красться" or action == "скроюсь":
                print("Вы ловко проскользнули в дверь до того, как охранник проснулся.")
                print("Наконец-то свобода. Ха-ха!\n")
                return
            elif action == "атаковать" or action == "атака":
                you_died(
                    "Стражник открывает глаза, когда вы оказываетесь в шаге от него. На удивление быстро он взмахивает рукой с кинжалом в ней и мир погружается во тьму.")

### ПЕРСОНАЖИ КОНЕЦ ###

##### КОМНАТЫ КОНЕЦ #####
'''
    Игрок находит сундук с сокровищами, варианты исследования сундука с сокровищами или охраны.
    Если игрок выбирает
    - Сундук с сокровищами: показать его содержимое; возможность взять сокровище или проигнорировать его (переходит к охране)
    - Охранник: после проверки сундука с сокровищами, игнорируя сундук с сокровищами для проверки охраны, он вызывает функцию guard().
'''


def right_door_room():
    # Список Treasure_chest содержит 4 элемента.
    treasure_chest = ["Бриллианты", "Деньги", "Плащ", "Меч"]
    print("Слева ты видишь комнату с деревянным сундуком с сокровищами, а справа перед дверью спящий охранник")

    # Спрашиваем у игрока, что он будет делать
    action = input("Что тебя больше интересует? [ сундук | стражник] > ")

    # Это способ увидеть, есть ли текст, набранный игроком, в списке
    if action.lower() in ["сокровища", "сундук", "слева"]:
        print("Хо-хо! Похоже, ты нашел сокровища. Раз они никому не нужны...")

        print("Сундук! Хотите его открыть? [ да | нет ]")
        choice = input("Итак, вы выбираете... > ")

        if choice == "да" or choice == "y":
            print("Риск - дело благородное. Посмотрим, что тут... /усмешка/")
            print("Со скрипом сундук открывается, а стражник продолжает спать. Вот уж воистину крепкий сон!")
            print("Вы кое-что нашли...")

            # Для каждого сокровища (переменная создается на лету в цикле for)
            # В списке Treasure_chest выводим сокровище.
            for treasure in treasure_chest:
                print(treasure)

            # Сокровищ много, спрашиваем, что будет делать игрок
            print("Что будешь делать?")
            # Получить количество предметов в сундуке с сокровищами с помощью len()
            num_items_in_chest = len(treasure_chest)

            print(f"Забрать все {num_items_in_chest} сокровища? [ да | нет ]")

            treasure_choice = input("> ")
            if treasure_choice == "да" or treasure_choice == "y":
                treasure_chest.remove("меч")
                print(
                    "\tВы достаете все вещи и обнаруживаете короткий блестящий меч. Он выглядит очень острым.")
                print(
                    "\tТак-то лучше'! Подобрав вещи и меч, вы готовы двигаться дальше. /сбрасываете никудышный меч в пустой сундук/")

                temp_treasure_list = treasure_chest[:]
                treasure_contents = ", ".join(treasure_chest)
                print(f"\tВы получаете: {treasure_contents}.")

                # Удаление всех предметов из сундука с сокровищами
                for treasure in temp_treasure_list:

                    treasure_chest.remove(treasure)

                # Берем новый меч и оставляем старый
                treasure_chest.append("никудышный меч")
                print(
                    f"\tЗабрав все необходимое из сундука вы оставляете {treasure_chest} следующим приключенцам. /усмешка/")
                print(
                    "\tВы и так уже засиделись. Пора на свободу!")
            elif treasure_choice == "нет" or treasure_choice == "n":
                print(
                    "Так. Стражник еще на месте (по крайней мере, вы на это надеетесь). Осталось просто пройти мимо него к выходу. Идти? [ да | нет ]")
        elif choice == "нет" or choice == "n":
            print("Да кому нужны эти сокровища? Идем отсюда...'")
    elif action.lower() in ["стражник", "вправо"]:
        print("Лучше давай повеселимся с охраной.")
    else:
        print("Воу. Если не хочется выбирать, то давай ударим охранника. Это весело!")
    guard()


def left_door_room():
    '''
    В комнате с красной дверью находится дракон.
    Если игрок решает убежать, то возвращается в комнату с двумя дверями.
    Иначе игрок умирает.
    '''
    print_monster()
    print("Огромный красный дракон спит в этой комнате.")
    print("Когда он слышит звук открываемой двери, то приоткрывает один глаз и видит вас.")
    print("Ты остаешься? [ да | нет ]")

    next_move = input("> ")

    if "нет" in next_move:
        start_adventure()
    else:
        you_died(
            "Оу, Похоже, он не ценил компанию и съел тебя. Ну, по крайней мере это вкусно!")

### КОМНАТЫ КОНЕЦ ###

##### ИМЯ ИГРОКА #####


def get_player_name():
    '''
    Получает имя игрока, может быть переименовано или не переименовано в зависимости от выбора игрока.
    Возвращает: имя игрока (измененное или неизмененное)
    '''
    name = input("Введите ваше имя > ")

    # ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ
    # Игрок вводит свое имя и присваивается переменной с именем "name"

    alt_name = "Забавный приключенец"
    answer = input(
        f"Твое имя {alt_name.upper()}, будет хорошо? [ да | нет ] > ").lower()

    if answer.lower() in ["да", "y"]:
        name = alt_name
        print(f"Отлично, {name.upper()}! Да начнется же приключение!")

    elif answer.lower() in ["нет", "n"]:
        print(
            f"Договорились. {name.upper()} теперь твое имя. Да начнем же наше приключение.")
    else:
        print(f"Шутишь? Тогда тебя будут звать {alt_name.upper()}")
        name = alt_name

    # Возвращаем переменную с именем name.
    # Функция main() не знает, что такое переменная "name", так как она существует только в функции get_player_name().

    return name

### ИМЯ ИГРОКА КОНЕЦ ###


def start_adventure():
    '''
    Эта функция начинает приключение, предоставляя два варианта на выбор игроку. Левую и правую дверь
    Выбранный вариант выведет выбранную дверь
    '''

    print_dungeon()
    print("Твои глаза открываются. Ты в не слишком большой комнате и лежишь на жесткой кровати.")
    print("Здесь царит легкий полумрак -- свет попадает только через маленькое окно высоко над головой")
    print("Похоже, на улице вечер. Тут никого нет. Чутье подсказывает, что нужно уходить отсюда")
    print("Тут ты замечаешь слева и справа двери. Первая укреплена сталью и явно тяжелая. Вторая же выглядит как самая обычная дверь")
    door_picked = input("Какую дверь ты выбираешь? [ левую | правую ] > ")

    # Выбор двери
    if door_picked == "левую" or door_picked == "влево":
        left_door_room()
    elif door_picked == "правую" or door_picked == "вправо":
        right_door_room()
    else:
        print("Тц, нет-нет, так не пойдет! Попробуй-ка выбирать только из правой и левой двери. Удачи!")
        start_adventure()


def main():

    player_name = get_player_name()

    start_adventure()

    print("\nВот и конец\n")
    print(f"Спасибо за игру, {player_name.upper()}")

##### ПРИНТЫ #####


def print_dungeon():
    print()
    print("   _________________________________________________________")
    print(" /|     -_-                                             _-  |\ ")
    print("/ |_-_- _                                         -_- _-   -| \   ")
    print("  |                            _-  _--                      | ")
    print("  |                            ,                            |")
    print("  |      .-'````````'.        '(`        .-'```````'-.      |")
    print("  |    .` |           `.      `)'      .` |           `.    |          ")
    print("  |   /   |   ()        \      U      /   |    ()       \   |")
    print("  |  |    |    ;         | o   T   o |    |    ;         |  |")
    print("  |  |    |     ;        |  .  |  .  |    |    ;         |  |")
    print("  |  |    |     ;        |   . | .   |    |    ;         |  |")
    print("  |  |    |     ;        |    .|.    |    |    ;         |  |")
    print("  |  |    |____;_________|     |     |    |____;_________|  |  ")
    print("  |  |   /  __ ;   -     |     !     |   /     `'() _ -  |  |")
    print("  |  |  / __  ()        -|        -  |  /  __--      -   |  |")
    print("  |  | /        __-- _   |   _- _ -  | /        __--_    |  |")
    print("  |__|/__________________|___________|/__________________|__|")
    print(" /                                             _ -        lc \ ")
    print("/   -_- _ -             _- _---                       -_-  -_ \ ")
    print()


def print_monster():
    print()
    print("                           |                     | ")
    print("                        \     /               \     / ")
    print("                       -= .'> =-             -= <'. =- ")
    print("                          '.'.                 .'.' ")
    print("                            '.'.             .'.' ")
    print("                              '.'.----^----.'.' ")
    print("                               /'==========='\ ")
    print("                           .  /  .-.     .-.  \  . ")
    print("                           :'.\ '.O.') ('.O.' /.':   ")
    print("                           '. |               | .'   ")
    print("                             '|      / \      |' ")
    print("                              \     (o'o)     / ")
    print("                              |\             /| ")
    print("                              \('._________.')/ ")
    print("                               '. \/|_|_|\/ .'                ")
    print("                                /'._______.'\ lc ")
    print()


def print_chest():
    print()
    print("                      _.--. ")
    print("                  _.-'_:-'|| ")
    print("              _.-'_.-::::'|| ")
    print("         _.-:'_.-::::::'  || ")
    print("       .'`-.-:::::::'     || ")
    print("      /.'`;|:::::::'      ||_ ")
    print("     ||   ||::::::'     _.;._'-._ ")
    print("     ||   ||:::::'  _.-!oo @.!-._'-. ")
    print("     ('.  ||:::::.-!()oo @!()@.-'_.| ")
    print("      '.'-;|:.-'.&$@.& ()$%-'o.'-U|| ")
    print("        `>'-.!@%()@'@_%-'_.-o _.|'|| ")
    print("         ||-._'-.@.-'_.-' _.-o  |'|| ")
    print("         ||=[ '-._.-+U/.-'    o |'|| ")
    print("         || '-.]=|| |'|      o  |'|| ")
    print("         ||      || |'|        _| '; ")
    print("         ||      || |'|    _.-'_.-' ")
    print("         |'-._   || |'|_.-'_.-' ")
    print("          '-._'-.|| |' `_.-' ")
    print("              '-.||_/.-' ")
    print()


def print_guard():
    print()
    print("                                                  ___I___ ")
    print("                                                 /=  |  #\ ")
    print("                                                /.__-| __ \ ")
    print("                                                |/ _\_/_ \| ")
    print("                                                (( __ \__)) ")
    print("                                             __ ((()))))()) __ ")
    print("                                           ,'  |()))))(((()|# `. ")
    print("                                          /    |^))()))))(^|   =\ ")
    print("                                         /    /^v^(())()()v^;'  .\ ")
    print("                                         |__.'^v^v^))))))^v^v`.__| ")
    print("                                        /_ ' \______(()_____(   | ")
    print("                                   _..-'   _//_____[xxx]_____\.-| ")
    print("                                  /,_#\.=-' /v^v^v^v^v^v^v^v^| _| ")
    print("                                  \)|)      v^v^v^v^v^v^v^v^v| _| ")
    print("                                   ||       :v^v^v^v^v^v`.-' |#  \, ")
    print("                                   ||       v^v^v^v`_/\__,--.|\_=_/ ")
    print("                                   ><       :v^v____|  \_____|_ ")
    print("                                ,  ||       v^      /  \       / ")
    print("                               //\_||_)\    `/_..-._\   )_...__\ ")
    print("                              ||   \/  #|     |_='_(     |  =_(_ ")
    print("                              ||  _/\_  |    /     =\    /  '  =\ ")
    print("                               \\\/ \/ )/ gnv |=____#|    '=....#| ")
    print()


def print_game_over():
    print()
    print("   _____          __  __ ______    ______      ________ _____  ")
    print("  / ____|   /\   |  \/  |  ____|  / __ \ \    / /  ____|  __ \ ")
    print(" | |  __   /  \  | \  / | |__    | |  | \ \  / /| |__  | |__) |")
    print(" | | |_ | / /\ \ | |\/| |  __|   | |  | |\ \/ / |  __| |  _  / ")
    print(" | |__| |/ ____ \| |  | | |____  | |__| | \  /  | |____| | \ \ ")
    print("  \_____/_/    \_\_|  |_|______|  \____/   \/   |______|_|  \_\\")
    print()

### ПРИНТЫ КОНЕЦ ###


if __name__ == '__main__':
    main()
